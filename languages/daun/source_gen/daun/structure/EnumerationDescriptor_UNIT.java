package daun.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.EnumerationDescriptorBase;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import java.util.List;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;

public class EnumerationDescriptor_UNIT extends EnumerationDescriptorBase {

  public EnumerationDescriptor_UNIT() {
    super(0x26ef42d6083d44d9L, 0x8ed5b8e28497bd10L, 0x13bb48ea8c10617fL, "UNIT", "r:81b43fd3-33f7-4873-a178-a8e9d6193b1e(daun.structure)/1421810279574954367");
  }

  private final EnumerationDescriptor.MemberDescriptor myMember_jam_0 = new EnumerationDescriptor.MemberDescriptor("jam", "jam", 0x13bb48ea8c106181L, "r:81b43fd3-33f7-4873-a178-a8e9d6193b1e(daun.structure)/1421810279574954369");
  private final EnumerationDescriptor.MemberDescriptor myMember_menit_0 = new EnumerationDescriptor.MemberDescriptor("menit", "menit", 0x13bb48ea8c106185L, "r:81b43fd3-33f7-4873-a178-a8e9d6193b1e(daun.structure)/1421810279574954373");

  private final EnumerationLiteralsIndex myIndex = EnumerationLiteralsIndex.build(0x26ef42d6083d44d9L, 0x8ed5b8e28497bd10L, 0x13bb48ea8c10617fL, 0x13bb48ea8c106181L, 0x13bb48ea8c106185L);
  private final List<EnumerationDescriptor.MemberDescriptor> myMembers = new EnumerationDescriptorBase.MembersList0(myIndex, myMember_jam_0, myMember_menit_0);

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getDefault() {
    return null;
  }

  @NotNull
  @Override
  public List<EnumerationDescriptor.MemberDescriptor> getMembers() {
    return myMembers;
  }

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getMember(@Nullable String memberName) {
    if (memberName == null) {
      return null;
    }
    switch (memberName) {
      case "jam":
        return myMember_jam_0;
      case "menit":
        return myMember_menit_0;
    }
    return null;
  }

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getMember(long idValue) {
    int index = myIndex.index(idValue);
    if (index == -1) {
      return null;
    }
    return myMembers.get(index);
  }
}
